movement:

pawn:
- if at home square, cannot move more than 2 
- if not at home square, cannot move more than 1
- cannot move backwards
- cannot move forward if it puts king in check
- cannot move forward if something in the way
- can have 2 pawns on same column 
- account for promotion

capture:

pawn:
- capture diagonally
- cannot capture own piece
- cannot capture empty square
- cannot capture backwards diagonally
- account for promotion (longest name, e.g. bxc8=Q#)
- en passant

figure out code for piece movement and capture

knight have no restrictions
can jump over pieces

bishop rook queen king have restrictions
need to factor in restrictions
via loop(?)

queen is bishop + rook
can shorten code(!)

need to optimise code

moves by player can check enemy king

two kinds of checks:

the piece moved itself put enemy king in check, i.e. Queen is diagonally across King

the piece move opened up a line to the king either diagonally or straight to the king,
allowing a piece to check the king via discovered check

checkenemyking() to see if piece moving caused a check on enemy king
need to keep checking if every move gives check

check if enemy king has empty lines around(?)
need to check on diag,vert,hori,L
via for loop
similar to legalbishop and legalrook
